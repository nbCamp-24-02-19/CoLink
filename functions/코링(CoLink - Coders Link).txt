코링(CoLink - Coders Link) 
1. 프로젝트 설명
목적: 팀프로젝트(혹은 스터디)를 원하는 유저들을 서로 매칭시켜주는 앱
타겟: 팀프로젝트 경험이 부족한 개발을 시작한지 얼마 안된 대학생 취업준비생

2. 페이지별 기능 및 기술 스택/ 아키텍처
2-1.페이지별 기능
홈 
화면 상단 게시물 홍보 
모집 글 보여주기

검색
외부 검색 API Algolia 사용
게시물 검색
게시물 필터 검색 기능
게시글
게시글 작성
모집인원 설정
태그 추가
작성시 그룹 페이지 자동 생성
그룹
작성자가 참여한 그룹 목록
새 그룹 모집하기
지원한 그룹 목록

채팅
실시간 채팅 기능
메시지 읽은 멤버 수 표시
그룹 채팅 기능

내정보
내정보 표시
보유 스킬 추가
유저 프로필 수정
로그아웃

2-2. 아키텍처/기술스택
아키텍처: 클린 아키텍처/MVVM
Data : 파이어 베이스 연동 레포지토리 구현부
DI: 의존성 주입을 위한 모듈
Domain: 서버에 저장되고 불러오는 데이터 Entity, Repository, UseCase
UI: 각 뷰를 MVVM패턴으로 구현
Util: 다이얼로그 출력, 프로그래스바 출력, 날짜 및 시간을 변경해주는 확장함수들 등 유틸리티 클래스 

기술스택 : 
코틀린
안드로이드 스튜디오
파이어 베이스
Hilt
Coil
Algolia 


3.시연
4.트러블 슈팅/ 기술적용의 이유
기술 적용 이유
Firebase: 게시물정보, 유저정보, 채팅 등의 데이터를 저장해야 해 서버가 필요한대, 전문적인 지식이 없어도 구현하기 좋고 안드로이드 스튜디오에서 지원해주는 파이어 베이스를 사용
Coil
코드가 코틀린으로 이루어져 있어 자연스럽고, 확장함수를 통해 간편하게 구현이 가능
자체적으로 코루틴에서 작동하기 때문에 랜더링 시간도 Glide나 Picasso에 비해 빠르고 유연해 선택
https://jizard.tistory.com/224
https://velog.io/@jshme/Android-Image-Loader-Library

DI
프로젝트 구성되는 것들이 많은데, MVVM으로 만들게 된다면 뷰모델 팩토리등 보일러 플레이트 코드도 많아져 복잡해지니 , 유지보수 등 관리하기 좋게 DI를 사용했다.
Hilt를 선택한 이유
 Dagger나 Hilt같은경우 컴파일 타임에 종속성을 처리하기 때문에, 런타임에서 확인하는 Koin 보다 관리하기 좋음
Dagger같은 경우 유연하고 설정할수 있는게 많지만, 설정과 관리가 많이 복잡해짐
Hilt 구글에서 공식으로 지원하기때문에 호환성 문제등 빠르게 해결되어 개발중 신경쓸게 적음


외부검색 엔진 라이브러리 Algoria 사용:
파이어 베이스는 라이크 쿼리를 지원하지 않음
키워드 검색으로 검색 비슷하게 만들었지만
첫 단어가 입력한 검색어로 시작하지 않는다면 검색이 안되는 한계가 있다.
모든 단어를 쪼개서 키워드로 저장하고 검색하는 방법도 있지만, 그렇게 되면 파이어 스토어에 저장되는 값이 커지고 복잡해질 수가 있다.
그렇기 때문에 외부 검색 api인 algolia를 사용.
지원 기능

트러블 슈팅
1.액티비티와 다이얼로그를 프래그먼트로 구조 개선
UX구조가 처음 이랑 달라지면서, 구조가 복잡해짐
기존에 액티비티 창을 띄워서 게시물 작성 화면을 보여줬었는데, 이후에 멤버 추천, 그룹 페이지 작성으로 이동하게 되면서, 검색프래그먼트에서 신호를 받고 프래그먼트 다이얼로그를 띄워주는등, 구조가 복잡해지고 유지 보수하기 힘들어짐
→ 기존에 액티비티로 구현한 부분을 프래그먼트로 구조를 수정
프래그먼트를 사용하면 화면의 일부분을 독립적으로 관리할 수 있고 재사용성이 증가한다.
여러 화면 강의 전환이 필요한 경우 효과적으로 처리할 수 있어 프래그먼트를 사용하는 것이 더 나은 방법임
진행 중인 프로젝트를 생각했을 때 게시물 화면이나 그룹 화면에서 여러 번 이동하는 화면이 발생하여 해당 화면들을 프래그먼트로 구현하여 액티비티 내에서 동적으로 교체하는 방식으로 구조를 변경함

2. 데이터가 들어왔음에도 옵저버로 뷰가 갱신되지 않는 문제(feat: 무한스크롤)
데이터가 들어왔는데 초기 xml 파일의 뷰만 에뮬레이터에 떠 있고, 다른 프레그먼트로 갔다 와야지만 정상적으로 뜨게 됨
→ itemCount를 Int.MAX_VALUE에서 currentList.size로 변경
MAX_VALUE로 사이즈를 설정하고 그 중간에 위치시켜 무한스크롤을 구현했는대 데이터를 받아올때 문제 발생.
처음 데이터를 가져올 때는 7개만 가져오게 설정을 해놨는데 이를 여기에서는 size 7이 아닌 Int.Max_VALUE를 size로 갖고 있기에 서로 달라서 바로 데이터가 들어가지 않고 초기화면이 나옴
registerOnPageChangeCallback 함수를 이용해서 무한 스크롤을 구현해서 해결

3. 검색 부분 데이터 필터가 되지않던 문제
게시글의 타입(프로젝트/ 스터디), 상태(모집중/모집완료)를 필터링하는데, 타입이나 상태 둘중하나만 필터가 되고 둘을 같이 누르면 필터가 안되는 문제
→ 게시글을 관찰하던 searchModel의 데이터를 기준으로 관찰했는데, 타입과, 상태를 분리해서 LiveData를 구현해, 각각의 상태를 관찰, 참조하면서 필터 기능을 구현

4. 더미데이터에서 파이어 베이스의 데이터를 참조해서 UI를 구현하는 문제
더미데이터를 사용해 Ui를 구현 하고, 뷰모델을 사용해 파이어 베이스의 데이터를 불러오는 부분으로 전환하는데 UI 갱신을 못하던 문제
→ 뷰모델에서 LiveData를 생성해 레포지토리에서 데이터를 받아오고, 뷰에서 데이터를 관찰해서 화면에 뿌려주며 해결

5. 백그라운드 데이터 상태 관리 개선
데이터를 받을때 서버에서 전송하고 받아오기 까지 시간이 걸려 프로그래스바를 띄워주는대,
데이터를 전달 요청 보내는 부분, 전달 받는 부분, 요청했는데 실패한부분등 코드가 점점 길어지고 복잡해짐
→ sealed class로 로딩,성공, 에러 부분을 묶어줘서 처리해주고, Generic을 이용해 보일러플레이트 코드가 생기지 않게 구현

5. MVP 이후 최종까지 추가 할 기능
팀원 평가: 프로젝트가 끝날시 각 유저 평가, 이를 기준으로 추천 알고리즘 구현
완료프로젝트 홍보: 프로젝트가 완료됬을때, 완료한 프로젝트를 홈 프래그먼트에서홍보
홍보 게시물 페이지 만들고 프로젝트에 대해 상세히 설명하는 게시물 구현
홍보 게시물에 관련 링크 설정(플레이스토어 링크, 앱 스토어 링크 등)
취업 공고, 관련 게시글: 
타겟이 취준생, 대학생 등이니 관심사에 맞게 취업 공고 등을 보여줌( JobKorea API 등)
공고 선택시 공고를 보여주고, 밑에 관련 게시물을 보여주는 기능
카카오 , 구글 API 로그인
알림
게시물 좋아요